/*
 * generated by Xtext 2.25.0
 */
package model.myzdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyZDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MyZModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.MyZModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSystemstatespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSystemstatespaceSystemStateSpaceParserRuleCall_0_0 = (RuleCall)cSystemstatespaceAssignment_0.eContents().get(0);
		private final Assignment cInitialstateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialstateInitialStateParserRuleCall_1_0 = (RuleCall)cInitialstateAssignment_1.eContents().get(0);
		private final Assignment cSchemasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSchemasSchemaParserRuleCall_2_0 = (RuleCall)cSchemasAssignment_2.eContents().get(0);
		
		//MyZModel:
		//    systemstatespace+=SystemStateSpace
		//    initialstate+=InitialState
		//    (schemas+=Schema)*
		//     ;
		@Override public ParserRule getRule() { return rule; }
		
		//systemstatespace+=SystemStateSpace
		//initialstate+=InitialState
		//(schemas+=Schema)*
		public Group getGroup() { return cGroup; }
		
		//systemstatespace+=SystemStateSpace
		public Assignment getSystemstatespaceAssignment_0() { return cSystemstatespaceAssignment_0; }
		
		//SystemStateSpace
		public RuleCall getSystemstatespaceSystemStateSpaceParserRuleCall_0_0() { return cSystemstatespaceSystemStateSpaceParserRuleCall_0_0; }
		
		//initialstate+=InitialState
		public Assignment getInitialstateAssignment_1() { return cInitialstateAssignment_1; }
		
		//InitialState
		public RuleCall getInitialstateInitialStateParserRuleCall_1_0() { return cInitialstateInitialStateParserRuleCall_1_0; }
		
		//(schemas+=Schema)*
		public Assignment getSchemasAssignment_2() { return cSchemasAssignment_2; }
		
		//Schema
		public RuleCall getSchemasSchemaParserRuleCall_2_0() { return cSchemasSchemaParserRuleCall_2_0; }
	}
	public class SystemStateSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.SystemStateSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cNNParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cNNParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cNNParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final RuleCall cVBZParserRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final Assignment cNameAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_0_0_4_0 = (RuleCall)cNameAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final RuleCall cVBZParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cNNParserRuleCall_0_1_2 = (RuleCall)cGroup_0_1.eContents().get(2);
		private final RuleCall cNNParserRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final RuleCall cNNParserRuleCall_0_1_4 = (RuleCall)cGroup_0_1.eContents().get(4);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cDTParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cNNSParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cVBPParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cVBPParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariablesParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariablesParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateSystemStateSpacePredicateParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//SystemStateSpace:
		//    ((NN NN NN VBZ name=ID) | (name=ID VBZ NN NN NN))
		//    ((DT NNS VBP) | (NNS VBP) | (NNS) ) variables+=Variables(',' variables+=Variables)*
		//    predicate+=SystemStateSpacePredicate
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//((NN NN NN VBZ name=ID) | (name=ID VBZ NN NN NN))
		//((DT NNS VBP) | (NNS VBP) | (NNS) ) variables+=Variables(',' variables+=Variables)*
		//predicate+=SystemStateSpacePredicate
		public Group getGroup() { return cGroup; }
		
		//((NN NN NN VBZ name=ID) | (name=ID VBZ NN NN NN))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(NN NN NN VBZ name=ID)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_0_0() { return cNNParserRuleCall_0_0_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_0_1() { return cNNParserRuleCall_0_0_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_0_2() { return cNNParserRuleCall_0_0_2; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_0_0_3() { return cVBZParserRuleCall_0_0_3; }
		
		//name=ID
		public Assignment getNameAssignment_0_0_4() { return cNameAssignment_0_0_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_4_0() { return cNameIDTerminalRuleCall_0_0_4_0; }
		
		//(name=ID VBZ NN NN NN)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_0_1_1() { return cVBZParserRuleCall_0_1_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_1_2() { return cNNParserRuleCall_0_1_2; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_1_3() { return cNNParserRuleCall_0_1_3; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_1_4() { return cNNParserRuleCall_0_1_4; }
		
		//((DT NNS VBP) | (NNS VBP) | (NNS) )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(DT NNS VBP)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_1_0_0() { return cDTParserRuleCall_1_0_0; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_1_0_1() { return cNNSParserRuleCall_1_0_1; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_1_0_2() { return cVBPParserRuleCall_1_0_2; }
		
		//(NNS VBP)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_1_1_0() { return cNNSParserRuleCall_1_1_0; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_1_1_1() { return cVBPParserRuleCall_1_1_1; }
		
		//(NNS)
		public RuleCall getNNSParserRuleCall_1_2() { return cNNSParserRuleCall_1_2; }
		
		//variables+=Variables
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_2_0() { return cVariablesVariablesParserRuleCall_2_0; }
		
		//(',' variables+=Variables)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variables+=Variables
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_3_1_0() { return cVariablesVariablesParserRuleCall_3_1_0; }
		
		//predicate+=SystemStateSpacePredicate
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//SystemStateSpacePredicate
		public RuleCall getPredicateSystemStateSpacePredicateParserRuleCall_4_0() { return cPredicateSystemStateSpacePredicateParserRuleCall_4_0; }
	}
	public class SystemStateSpacePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.SystemStateSpacePredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDTParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cJJParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVBPParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cVasAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cVasVariablesParserRuleCall_0_4_0 = (RuleCall)cVasAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cVasAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cVasVariablesParserRuleCall_0_5_1_0 = (RuleCall)cVasAssignment_0_5_1.eContents().get(0);
		private final Assignment cFunctionAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cFunctionFunctionListParserRuleCall_0_6_0 = (RuleCall)cFunctionAssignment_0_6.eContents().get(0);
		private final Assignment cPredicateVarAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cPredicateVarVariablesParserRuleCall_0_7_0 = (RuleCall)cPredicateVarAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cJJParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNNSParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVBPParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cVasAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cVasVariablesParserRuleCall_1_3_0 = (RuleCall)cVasAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cVasAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cVasVariablesParserRuleCall_1_4_1_0 = (RuleCall)cVasAssignment_1_4_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFunctionFunctionListParserRuleCall_1_5_0 = (RuleCall)cFunctionAssignment_1_5.eContents().get(0);
		private final Assignment cPredicateVarAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cPredicateVarVariablesParserRuleCall_1_6_0 = (RuleCall)cPredicateVarAssignment_1_6.eContents().get(0);
		
		//SystemStateSpacePredicate:
		//    DT JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables | JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables;
		@Override public ParserRule getRule() { return rule; }
		
		//DT JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables | JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DT JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables
		public Group getGroup_0() { return cGroup_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_0_0() { return cDTParserRuleCall_0_0; }
		
		//JJ
		public RuleCall getJJParserRuleCall_0_1() { return cJJParserRuleCall_0_1; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_0_2() { return cNNSParserRuleCall_0_2; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_0_3() { return cVBPParserRuleCall_0_3; }
		
		//vas+=Variables
		public Assignment getVasAssignment_0_4() { return cVasAssignment_0_4; }
		
		//Variables
		public RuleCall getVasVariablesParserRuleCall_0_4_0() { return cVasVariablesParserRuleCall_0_4_0; }
		
		//(',' vas+=Variables)*
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//','
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }
		
		//vas+=Variables
		public Assignment getVasAssignment_0_5_1() { return cVasAssignment_0_5_1; }
		
		//Variables
		public RuleCall getVasVariablesParserRuleCall_0_5_1_0() { return cVasVariablesParserRuleCall_0_5_1_0; }
		
		//function=FunctionList
		public Assignment getFunctionAssignment_0_6() { return cFunctionAssignment_0_6; }
		
		//FunctionList
		public RuleCall getFunctionFunctionListParserRuleCall_0_6_0() { return cFunctionFunctionListParserRuleCall_0_6_0; }
		
		//predicateVar=Variables
		public Assignment getPredicateVarAssignment_0_7() { return cPredicateVarAssignment_0_7; }
		
		//Variables
		public RuleCall getPredicateVarVariablesParserRuleCall_0_7_0() { return cPredicateVarVariablesParserRuleCall_0_7_0; }
		
		//JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables
		public Group getGroup_1() { return cGroup_1; }
		
		//JJ
		public RuleCall getJJParserRuleCall_1_0() { return cJJParserRuleCall_1_0; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_1_1() { return cNNSParserRuleCall_1_1; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_1_2() { return cVBPParserRuleCall_1_2; }
		
		//vas+=Variables
		public Assignment getVasAssignment_1_3() { return cVasAssignment_1_3; }
		
		//Variables
		public RuleCall getVasVariablesParserRuleCall_1_3_0() { return cVasVariablesParserRuleCall_1_3_0; }
		
		//(',' vas+=Variables)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//vas+=Variables
		public Assignment getVasAssignment_1_4_1() { return cVasAssignment_1_4_1; }
		
		//Variables
		public RuleCall getVasVariablesParserRuleCall_1_4_1_0() { return cVasVariablesParserRuleCall_1_4_1_0; }
		
		//function=FunctionList
		public Assignment getFunctionAssignment_1_5() { return cFunctionAssignment_1_5; }
		
		//FunctionList
		public RuleCall getFunctionFunctionListParserRuleCall_1_5_0() { return cFunctionFunctionListParserRuleCall_1_5_0; }
		
		//predicateVar=Variables
		public Assignment getPredicateVarAssignment_1_6() { return cPredicateVarAssignment_1_6; }
		
		//Variables
		public RuleCall getPredicateVarVariablesParserRuleCall_1_6_0() { return cPredicateVarVariablesParserRuleCall_1_6_0; }
	}
	public class NNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.NN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSpaceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInitialKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPredicateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVariableKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVariablesKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSchemaKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOperationKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cFunctionKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cInputKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOutputKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cNameKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//NN:
		//    'system' | 'state' |'space'| 'initial' | 'predicate' |'variable'|'variables'|'schema'|'operation'|'function'|'input'|'output'|'name';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' | 'state' |'space'| 'initial' | 'predicate' |'variable'|'variables'|'schema'|'operation'|'function'|'input'|'output'|'name'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//'space'
		public Keyword getSpaceKeyword_2() { return cSpaceKeyword_2; }
		
		//'initial'
		public Keyword getInitialKeyword_3() { return cInitialKeyword_3; }
		
		//'predicate'
		public Keyword getPredicateKeyword_4() { return cPredicateKeyword_4; }
		
		//'variable'
		public Keyword getVariableKeyword_5() { return cVariableKeyword_5; }
		
		//'variables'
		public Keyword getVariablesKeyword_6() { return cVariablesKeyword_6; }
		
		//'schema'
		public Keyword getSchemaKeyword_7() { return cSchemaKeyword_7; }
		
		//'operation'
		public Keyword getOperationKeyword_8() { return cOperationKeyword_8; }
		
		//'function'
		public Keyword getFunctionKeyword_9() { return cFunctionKeyword_9; }
		
		//'input'
		public Keyword getInputKeyword_10() { return cInputKeyword_10; }
		
		//'output'
		public Keyword getOutputKeyword_11() { return cOutputKeyword_11; }
		
		//'name'
		public Keyword getNameKeyword_12() { return cNameKeyword_12; }
	}
	public class VBZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.VBZ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAreKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//VBZ:
		//    'is' | 'are' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'is' | 'are'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//'are'
		public Keyword getAreKeyword_1() { return cAreKeyword_1; }
	}
	public class DTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.DT");
		private final Keyword cTheKeyword = (Keyword)rule.eContents().get(1);
		
		//DT:
		//    'The';
		@Override public ParserRule getRule() { return rule; }
		
		//'The'
		public Keyword getTheKeyword() { return cTheKeyword; }
	}
	public class NNSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.NNS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVariablesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cParametersKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFeaturesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVariableKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cParameterKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFeatureKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//NNS:
		//    'variables'| 'parameters'| 'features'|'variable'| 'parameter'| 'feature';
		@Override public ParserRule getRule() { return rule; }
		
		//'variables'| 'parameters'| 'features'|'variable'| 'parameter'| 'feature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'variables'
		public Keyword getVariablesKeyword_0() { return cVariablesKeyword_0; }
		
		//'parameters'
		public Keyword getParametersKeyword_1() { return cParametersKeyword_1; }
		
		//'features'
		public Keyword getFeaturesKeyword_2() { return cFeaturesKeyword_2; }
		
		//'variable'
		public Keyword getVariableKeyword_3() { return cVariableKeyword_3; }
		
		//'parameter'
		public Keyword getParameterKeyword_4() { return cParameterKeyword_4; }
		
		//'feature'
		public Keyword getFeatureKeyword_5() { return cFeatureKeyword_5; }
	}
	public class VBPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.VBP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIncludesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAreKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//VBP:
		//    'include' | 'includes' | 'is' | 'are';
		@Override public ParserRule getRule() { return rule; }
		
		//'include' | 'includes' | 'is' | 'are'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//'includes'
		public Keyword getIncludesKeyword_1() { return cIncludesKeyword_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'are'
		public Keyword getAreKeyword_3() { return cAreKeyword_3; }
	}
	public class JJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.JJ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPredicateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInitialKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPostconditionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPostConditionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//JJ:
		//    'predicate' | 'initial' | 'postcondition' | 'post condition';
		@Override public ParserRule getRule() { return rule; }
		
		//'predicate' | 'initial' | 'postcondition' | 'post condition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'predicate'
		public Keyword getPredicateKeyword_0() { return cPredicateKeyword_0; }
		
		//'initial'
		public Keyword getInitialKeyword_1() { return cInitialKeyword_1; }
		
		//'postcondition'
		public Keyword getPostconditionKeyword_2() { return cPostconditionKeyword_2; }
		
		//'post condition'
		public Keyword getPostConditionKeyword_3() { return cPostConditionKeyword_3; }
	}
	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJJParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNNParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cVBZParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final RuleCall cDTParserRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final RuleCall cJJParserRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_4_0_2 = (RuleCall)cGroup_4_0.eContents().get(2);
		private final RuleCall cVBPParserRuleCall_4_0_3 = (RuleCall)cGroup_4_0.eContents().get(3);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final RuleCall cJJParserRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final RuleCall cNNSParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final RuleCall cVBPParserRuleCall_4_1_2 = (RuleCall)cGroup_4_1.eContents().get(2);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariablesParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariablesVariablesParserRuleCall_6_1_0 = (RuleCall)cVariablesAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final RuleCall cDTParserRuleCall_7_0_0 = (RuleCall)cGroup_7_0.eContents().get(0);
		private final RuleCall cJJParserRuleCall_7_0_1 = (RuleCall)cGroup_7_0.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_7_0_2 = (RuleCall)cGroup_7_0.eContents().get(2);
		private final RuleCall cVBPParserRuleCall_7_0_3 = (RuleCall)cGroup_7_0.eContents().get(3);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final RuleCall cJJParserRuleCall_7_1_0 = (RuleCall)cGroup_7_1.eContents().get(0);
		private final RuleCall cNNSParserRuleCall_7_1_1 = (RuleCall)cGroup_7_1.eContents().get(1);
		private final RuleCall cVBPParserRuleCall_7_1_2 = (RuleCall)cGroup_7_1.eContents().get(2);
		private final Assignment cPredAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPredVariablesParserRuleCall_8_0 = (RuleCall)cPredAssignment_8.eContents().get(0);
		
		//InitialState:
		//    JJ NN VBZ name=ID
		//    ((DT JJ NNS VBP) | (JJ NNS VBP)) variables+=Variables(',' variables+=Variables)*
		//    ((DT JJ NNS VBP) | (JJ NNS VBP)) pred+=Variables;
		@Override public ParserRule getRule() { return rule; }
		
		//JJ NN VBZ name=ID
		//((DT JJ NNS VBP) | (JJ NNS VBP)) variables+=Variables(',' variables+=Variables)*
		//((DT JJ NNS VBP) | (JJ NNS VBP)) pred+=Variables
		public Group getGroup() { return cGroup; }
		
		//JJ
		public RuleCall getJJParserRuleCall_0() { return cJJParserRuleCall_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_1() { return cNNParserRuleCall_1; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_2() { return cVBZParserRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//((DT JJ NNS VBP) | (JJ NNS VBP))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(DT JJ NNS VBP)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_4_0_0() { return cDTParserRuleCall_4_0_0; }
		
		//JJ
		public RuleCall getJJParserRuleCall_4_0_1() { return cJJParserRuleCall_4_0_1; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_4_0_2() { return cNNSParserRuleCall_4_0_2; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_4_0_3() { return cVBPParserRuleCall_4_0_3; }
		
		//(JJ NNS VBP)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//JJ
		public RuleCall getJJParserRuleCall_4_1_0() { return cJJParserRuleCall_4_1_0; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_4_1_1() { return cNNSParserRuleCall_4_1_1; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_4_1_2() { return cVBPParserRuleCall_4_1_2; }
		
		//variables+=Variables
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_5_0() { return cVariablesVariablesParserRuleCall_5_0; }
		
		//(',' variables+=Variables)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//variables+=Variables
		public Assignment getVariablesAssignment_6_1() { return cVariablesAssignment_6_1; }
		
		//Variables
		public RuleCall getVariablesVariablesParserRuleCall_6_1_0() { return cVariablesVariablesParserRuleCall_6_1_0; }
		
		//((DT JJ NNS VBP) | (JJ NNS VBP))
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//(DT JJ NNS VBP)
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_7_0_0() { return cDTParserRuleCall_7_0_0; }
		
		//JJ
		public RuleCall getJJParserRuleCall_7_0_1() { return cJJParserRuleCall_7_0_1; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_7_0_2() { return cNNSParserRuleCall_7_0_2; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_7_0_3() { return cVBPParserRuleCall_7_0_3; }
		
		//(JJ NNS VBP)
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//JJ
		public RuleCall getJJParserRuleCall_7_1_0() { return cJJParserRuleCall_7_1_0; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_7_1_1() { return cNNSParserRuleCall_7_1_1; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_7_1_2() { return cVBPParserRuleCall_7_1_2; }
		
		//pred+=Variables
		public Assignment getPredAssignment_8() { return cPredAssignment_8; }
		
		//Variables
		public RuleCall getPredVariablesParserRuleCall_8_0() { return cPredVariablesParserRuleCall_8_0; }
	}
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cNNParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cNNParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cNNParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVBZParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cNameAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_0_4_0 = (RuleCall)cNameAssignment_0_4.eContents().get(0);
		private final RuleCall cNNParserRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final RuleCall cNNParserRuleCall_0_6 = (RuleCall)cGroup_0.eContents().get(6);
		private final RuleCall cMDParserRuleCall_0_7 = (RuleCall)cGroup_0.eContents().get(7);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateSchemaStateParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		private final Assignment cNameSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSchemaEStringParserRuleCall_2_0 = (RuleCall)cNameSchemaAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cDTParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cNNParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cVBPParserRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cNNParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cNNSParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final RuleCall cVBPParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final Assignment cVarsInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarsInputVariablesParserRuleCall_4_0 = (RuleCall)cVarsInputAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVarsInputAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVarsInputVariablesParserRuleCall_5_1_0 = (RuleCall)cVarsInputAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final RuleCall cDTParserRuleCall_6_0_0 = (RuleCall)cGroup_6_0.eContents().get(0);
		private final RuleCall cNNParserRuleCall_6_0_1 = (RuleCall)cGroup_6_0.eContents().get(1);
		private final RuleCall cNNSParserRuleCall_6_0_2 = (RuleCall)cGroup_6_0.eContents().get(2);
		private final RuleCall cVBPParserRuleCall_6_0_3 = (RuleCall)cGroup_6_0.eContents().get(3);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final RuleCall cNNParserRuleCall_6_1_0 = (RuleCall)cGroup_6_1.eContents().get(0);
		private final RuleCall cNNSParserRuleCall_6_1_1 = (RuleCall)cGroup_6_1.eContents().get(1);
		private final RuleCall cVBPParserRuleCall_6_1_2 = (RuleCall)cGroup_6_1.eContents().get(2);
		private final Assignment cVarsOutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVarsOutputVariablesParserRuleCall_7_0 = (RuleCall)cVarsOutputAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVarsOutputAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVarsOutputVariablesParserRuleCall_8_1_0 = (RuleCall)cVarsOutputAssignment_8_1.eContents().get(0);
		private final Assignment cPredicatesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPredicatesPredicateParserRuleCall_9_0 = (RuleCall)cPredicatesAssignment_9.eContents().get(0);
		
		//Schema:
		//    (NN NN NN VBZ name=ID NN NN MD) state=SchemaState nameSchema=EString
		//    ((DT NN NNS VBP) | (NN NNS VBP)) varsInput+=Variables(',' varsInput+=Variables)*
		//    ((DT NN NNS VBP) | (NN NNS VBP)) varsOutput+=Variables(',' varsOutput+=Variables)*
		//    predicates+=Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//(NN NN NN VBZ name=ID NN NN MD) state=SchemaState nameSchema=EString
		//((DT NN NNS VBP) | (NN NNS VBP)) varsInput+=Variables(',' varsInput+=Variables)*
		//((DT NN NNS VBP) | (NN NNS VBP)) varsOutput+=Variables(',' varsOutput+=Variables)*
		//predicates+=Predicate
		public Group getGroup() { return cGroup; }
		
		//(NN NN NN VBZ name=ID NN NN MD)
		public Group getGroup_0() { return cGroup_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_0() { return cNNParserRuleCall_0_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_1() { return cNNParserRuleCall_0_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_2() { return cNNParserRuleCall_0_2; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_0_3() { return cVBZParserRuleCall_0_3; }
		
		//name=ID
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_4_0() { return cNameIDTerminalRuleCall_0_4_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_5() { return cNNParserRuleCall_0_5; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_6() { return cNNParserRuleCall_0_6; }
		
		//MD
		public RuleCall getMDParserRuleCall_0_7() { return cMDParserRuleCall_0_7; }
		
		//state=SchemaState
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//SchemaState
		public RuleCall getStateSchemaStateParserRuleCall_1_0() { return cStateSchemaStateParserRuleCall_1_0; }
		
		//nameSchema=EString
		public Assignment getNameSchemaAssignment_2() { return cNameSchemaAssignment_2; }
		
		//EString
		public RuleCall getNameSchemaEStringParserRuleCall_2_0() { return cNameSchemaEStringParserRuleCall_2_0; }
		
		//((DT NN NNS VBP) | (NN NNS VBP))
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(DT NN NNS VBP)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_3_0_0() { return cDTParserRuleCall_3_0_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_3_0_1() { return cNNParserRuleCall_3_0_1; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_3_0_2() { return cNNSParserRuleCall_3_0_2; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_3_0_3() { return cVBPParserRuleCall_3_0_3; }
		
		//(NN NNS VBP)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_3_1_0() { return cNNParserRuleCall_3_1_0; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_3_1_1() { return cNNSParserRuleCall_3_1_1; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_3_1_2() { return cVBPParserRuleCall_3_1_2; }
		
		//varsInput+=Variables
		public Assignment getVarsInputAssignment_4() { return cVarsInputAssignment_4; }
		
		//Variables
		public RuleCall getVarsInputVariablesParserRuleCall_4_0() { return cVarsInputVariablesParserRuleCall_4_0; }
		
		//(',' varsInput+=Variables)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//varsInput+=Variables
		public Assignment getVarsInputAssignment_5_1() { return cVarsInputAssignment_5_1; }
		
		//Variables
		public RuleCall getVarsInputVariablesParserRuleCall_5_1_0() { return cVarsInputVariablesParserRuleCall_5_1_0; }
		
		//((DT NN NNS VBP) | (NN NNS VBP))
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//(DT NN NNS VBP)
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_6_0_0() { return cDTParserRuleCall_6_0_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_0_1() { return cNNParserRuleCall_6_0_1; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_6_0_2() { return cNNSParserRuleCall_6_0_2; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_6_0_3() { return cVBPParserRuleCall_6_0_3; }
		
		//(NN NNS VBP)
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_1_0() { return cNNParserRuleCall_6_1_0; }
		
		//NNS
		public RuleCall getNNSParserRuleCall_6_1_1() { return cNNSParserRuleCall_6_1_1; }
		
		//VBP
		public RuleCall getVBPParserRuleCall_6_1_2() { return cVBPParserRuleCall_6_1_2; }
		
		//varsOutput+=Variables
		public Assignment getVarsOutputAssignment_7() { return cVarsOutputAssignment_7; }
		
		//Variables
		public RuleCall getVarsOutputVariablesParserRuleCall_7_0() { return cVarsOutputVariablesParserRuleCall_7_0; }
		
		//(',' varsOutput+=Variables)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//varsOutput+=Variables
		public Assignment getVarsOutputAssignment_8_1() { return cVarsOutputAssignment_8_1; }
		
		//Variables
		public RuleCall getVarsOutputVariablesParserRuleCall_8_1_0() { return cVarsOutputVariablesParserRuleCall_8_1_0; }
		
		//predicates+=Predicate
		public Assignment getPredicatesAssignment_9() { return cPredicatesAssignment_9; }
		
		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_9_0() { return cPredicatesPredicateParserRuleCall_9_0; }
	}
	public class CCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.CC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CC:
		//    'and'| 'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'and'| 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class MDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.MD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWillKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAreKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MD:
		//    'will' | 'are';
		@Override public ParserRule getRule() { return rule; }
		
		//'will' | 'are'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'will'
		public Keyword getWillKeyword_0() { return cWillKeyword_0; }
		
		//'are'
		public Keyword getAreKeyword_1() { return cAreKeyword_1; }
	}
	public class VBGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.VBG");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cChangingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cChangeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//VBG:
		//    'changing' |'change';
		@Override public ParserRule getRule() { return rule; }
		
		//'changing' |'change'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'changing'
		public Keyword getChangingKeyword_0() { return cChangingKeyword_0; }
		
		//'change'
		public Keyword getChangeKeyword_1() { return cChangeKeyword_1; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cDTParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cJJParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cNNParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final RuleCall cNNParserRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final RuleCall cVBZParserRuleCall_0_0_4 = (RuleCall)cGroup_0_0.eContents().get(4);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cJJParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cNNParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cNNParserRuleCall_0_1_2 = (RuleCall)cGroup_0_1.eContents().get(2);
		private final RuleCall cVBZParserRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final Assignment cVasInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVasInputVariablesParserRuleCall_1_0 = (RuleCall)cVasInputAssignment_1.eContents().get(0);
		private final Assignment cBelongsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBelongsBelongsStateParserRuleCall_2_0 = (RuleCall)cBelongsAssignment_2.eContents().get(0);
		private final Assignment cBelongsVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBelongsVariableVariablesParserRuleCall_3_0 = (RuleCall)cBelongsVariableAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final RuleCall cDTParserRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final RuleCall cJJParserRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final RuleCall cNNParserRuleCall_4_0_2 = (RuleCall)cGroup_4_0.eContents().get(2);
		private final RuleCall cNNParserRuleCall_4_0_3 = (RuleCall)cGroup_4_0.eContents().get(3);
		private final RuleCall cVBZParserRuleCall_4_0_4 = (RuleCall)cGroup_4_0.eContents().get(4);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final RuleCall cJJParserRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final RuleCall cNNParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final RuleCall cNNParserRuleCall_4_1_2 = (RuleCall)cGroup_4_1.eContents().get(2);
		private final RuleCall cVBZParserRuleCall_4_1_3 = (RuleCall)cGroup_4_1.eContents().get(3);
		private final Assignment cVasOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVasOutputPredicatePostCondition2ParserRuleCall_5_0 = (RuleCall)cVasOutputAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final RuleCall cDTParserRuleCall_6_0_0 = (RuleCall)cGroup_6_0.eContents().get(0);
		private final RuleCall cJJParserRuleCall_6_0_1 = (RuleCall)cGroup_6_0.eContents().get(1);
		private final RuleCall cNNParserRuleCall_6_0_2 = (RuleCall)cGroup_6_0.eContents().get(2);
		private final RuleCall cVBGParserRuleCall_6_0_3 = (RuleCall)cGroup_6_0.eContents().get(3);
		private final RuleCall cNNParserRuleCall_6_0_4 = (RuleCall)cGroup_6_0.eContents().get(4);
		private final RuleCall cVBZParserRuleCall_6_0_5 = (RuleCall)cGroup_6_0.eContents().get(5);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final RuleCall cNNParserRuleCall_6_1_0 = (RuleCall)cGroup_6_1.eContents().get(0);
		private final RuleCall cVBZParserRuleCall_6_1_1 = (RuleCall)cGroup_6_1.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final RuleCall cJJParserRuleCall_6_2_0 = (RuleCall)cGroup_6_2.eContents().get(0);
		private final RuleCall cNNParserRuleCall_6_2_1 = (RuleCall)cGroup_6_2.eContents().get(1);
		private final RuleCall cVBGParserRuleCall_6_2_2 = (RuleCall)cGroup_6_2.eContents().get(2);
		private final RuleCall cNNParserRuleCall_6_2_3 = (RuleCall)cGroup_6_2.eContents().get(3);
		private final RuleCall cVBZParserRuleCall_6_2_4 = (RuleCall)cGroup_6_2.eContents().get(4);
		private final Assignment cVasStateChangeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVasStateChangePredicatePostCondition1ParserRuleCall_7_0 = (RuleCall)cVasStateChangeAssignment_7.eContents().get(0);
		
		//Predicate:
		//    ((DT JJ NN NN VBZ) | (JJ NN NN VBZ))? vasInput+=Variables? belongs=BelongsState ? belongsVariable=Variables ? //(',' vasOutput+=Variables)*
		//    ((DT JJ NN NN VBZ) | (JJ NN NN VBZ))?    vasOutput+=PredicatePostCondition2 ? //expression=Variables?//(',' vasOutput+=Variables)*
		//    ((DT JJ NN VBG NN VBZ)| (NN VBZ) | (JJ NN VBG NN VBZ))? vasStateChange+=PredicatePostCondition1 ? ;
		@Override public ParserRule getRule() { return rule; }
		
		//((DT JJ NN NN VBZ) | (JJ NN NN VBZ))? vasInput+=Variables? belongs=BelongsState ? belongsVariable=Variables ? //(',' vasOutput+=Variables)*
		//((DT JJ NN NN VBZ) | (JJ NN NN VBZ))?    vasOutput+=PredicatePostCondition2 ? //expression=Variables?//(',' vasOutput+=Variables)*
		//((DT JJ NN VBG NN VBZ)| (NN VBZ) | (JJ NN VBG NN VBZ))? vasStateChange+=PredicatePostCondition1 ?
		public Group getGroup() { return cGroup; }
		
		//((DT JJ NN NN VBZ) | (JJ NN NN VBZ))?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(DT JJ NN NN VBZ)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_0_0_0() { return cDTParserRuleCall_0_0_0; }
		
		//JJ
		public RuleCall getJJParserRuleCall_0_0_1() { return cJJParserRuleCall_0_0_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_0_2() { return cNNParserRuleCall_0_0_2; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_0_3() { return cNNParserRuleCall_0_0_3; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_0_0_4() { return cVBZParserRuleCall_0_0_4; }
		
		//(JJ NN NN VBZ)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//JJ
		public RuleCall getJJParserRuleCall_0_1_0() { return cJJParserRuleCall_0_1_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_1_1() { return cNNParserRuleCall_0_1_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_0_1_2() { return cNNParserRuleCall_0_1_2; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_0_1_3() { return cVBZParserRuleCall_0_1_3; }
		
		//vasInput+=Variables?
		public Assignment getVasInputAssignment_1() { return cVasInputAssignment_1; }
		
		//Variables
		public RuleCall getVasInputVariablesParserRuleCall_1_0() { return cVasInputVariablesParserRuleCall_1_0; }
		
		//belongs=BelongsState ?
		public Assignment getBelongsAssignment_2() { return cBelongsAssignment_2; }
		
		//BelongsState
		public RuleCall getBelongsBelongsStateParserRuleCall_2_0() { return cBelongsBelongsStateParserRuleCall_2_0; }
		
		//belongsVariable=Variables ?
		public Assignment getBelongsVariableAssignment_3() { return cBelongsVariableAssignment_3; }
		
		//Variables
		public RuleCall getBelongsVariableVariablesParserRuleCall_3_0() { return cBelongsVariableVariablesParserRuleCall_3_0; }
		
		////(',' vasOutput+=Variables)*
		//   ((DT JJ NN NN VBZ) | (JJ NN NN VBZ))?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(DT JJ NN NN VBZ)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_4_0_0() { return cDTParserRuleCall_4_0_0; }
		
		//JJ
		public RuleCall getJJParserRuleCall_4_0_1() { return cJJParserRuleCall_4_0_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_4_0_2() { return cNNParserRuleCall_4_0_2; }
		
		//NN
		public RuleCall getNNParserRuleCall_4_0_3() { return cNNParserRuleCall_4_0_3; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_4_0_4() { return cVBZParserRuleCall_4_0_4; }
		
		//(JJ NN NN VBZ)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//JJ
		public RuleCall getJJParserRuleCall_4_1_0() { return cJJParserRuleCall_4_1_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_4_1_1() { return cNNParserRuleCall_4_1_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_4_1_2() { return cNNParserRuleCall_4_1_2; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_4_1_3() { return cVBZParserRuleCall_4_1_3; }
		
		//vasOutput+=PredicatePostCondition2 ?
		public Assignment getVasOutputAssignment_5() { return cVasOutputAssignment_5; }
		
		//PredicatePostCondition2
		public RuleCall getVasOutputPredicatePostCondition2ParserRuleCall_5_0() { return cVasOutputPredicatePostCondition2ParserRuleCall_5_0; }
		
		////expression=Variables?//(',' vasOutput+=Variables)*
		//   ((DT JJ NN VBG NN VBZ)| (NN VBZ) | (JJ NN VBG NN VBZ))?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//(DT JJ NN VBG NN VBZ)
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_6_0_0() { return cDTParserRuleCall_6_0_0; }
		
		//JJ
		public RuleCall getJJParserRuleCall_6_0_1() { return cJJParserRuleCall_6_0_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_0_2() { return cNNParserRuleCall_6_0_2; }
		
		//VBG
		public RuleCall getVBGParserRuleCall_6_0_3() { return cVBGParserRuleCall_6_0_3; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_0_4() { return cNNParserRuleCall_6_0_4; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_6_0_5() { return cVBZParserRuleCall_6_0_5; }
		
		//(NN VBZ)
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_1_0() { return cNNParserRuleCall_6_1_0; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_6_1_1() { return cVBZParserRuleCall_6_1_1; }
		
		//(JJ NN VBG NN VBZ)
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//JJ
		public RuleCall getJJParserRuleCall_6_2_0() { return cJJParserRuleCall_6_2_0; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_2_1() { return cNNParserRuleCall_6_2_1; }
		
		//VBG
		public RuleCall getVBGParserRuleCall_6_2_2() { return cVBGParserRuleCall_6_2_2; }
		
		//NN
		public RuleCall getNNParserRuleCall_6_2_3() { return cNNParserRuleCall_6_2_3; }
		
		//VBZ
		public RuleCall getVBZParserRuleCall_6_2_4() { return cVBZParserRuleCall_6_2_4; }
		
		//vasStateChange+=PredicatePostCondition1 ?
		public Assignment getVasStateChangeAssignment_7() { return cVasStateChangeAssignment_7; }
		
		//PredicatePostCondition1
		public RuleCall getVasStateChangePredicatePostCondition1ParserRuleCall_7_0() { return cVasStateChangePredicatePostCondition1ParserRuleCall_7_0; }
	}
	public class SchemaStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.SchemaState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCHANGEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNOTCHANGEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SchemaState:
		//    'CHANGE' | 'NOT CHANGE';
		@Override public ParserRule getRule() { return rule; }
		
		//'CHANGE' | 'NOT CHANGE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CHANGE'
		public Keyword getCHANGEKeyword_0() { return cCHANGEKeyword_0; }
		
		//'NOT CHANGE'
		public Keyword getNOTCHANGEKeyword_1() { return cNOTCHANGEKeyword_1; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.Variables");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variables:
		//     name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class BelongsStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.BelongsState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBELONGSTOKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDOESNOTBELONGTOKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BelongsState:
		//    'BELONGS TO' | 'DOES NOT BELONG TO';
		@Override public ParserRule getRule() { return rule; }
		
		//'BELONGS TO' | 'DOES NOT BELONG TO'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BELONGS TO'
		public Keyword getBELONGSTOKeyword_0() { return cBELONGSTOKeyword_0; }
		
		//'DOES NOT BELONG TO'
		public Keyword getDOESNOTBELONGTOKeyword_1() { return cDOESNOTBELONGTOKeyword_1; }
	}
	public class FunctionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.FunctionList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDomKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FunctionList:
		//    'dom' | 'range';
		@Override public ParserRule getRule() { return rule; }
		
		//'dom' | 'range'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'dom'
		public Keyword getDomKeyword_0() { return cDomKeyword_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
	}
	public class PredicatePostCondition1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.PredicatePostCondition1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondition11Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondition11VariablesParserRuleCall_0_0 = (RuleCall)cCondition11Assignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNewKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondition12Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondition12VariablesParserRuleCall_3_0 = (RuleCall)cCondition12Assignment_3.eContents().get(0);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCondition13Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCondition13VariablesParserRuleCall_5_0 = (RuleCall)cCondition13Assignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCondition13Assignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCondition13VariablesParserRuleCall_6_1_0 = (RuleCall)cCondition13Assignment_6_1.eContents().get(0);
		
		//PredicatePostCondition1:
		//    condition11=Variables? 'with'? 'new'?  condition12=Variables? 'and '? condition13=Variables(',' condition13=Variables)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//condition11=Variables? 'with'? 'new'?  condition12=Variables? 'and '? condition13=Variables(',' condition13=Variables)?
		public Group getGroup() { return cGroup; }
		
		//condition11=Variables?
		public Assignment getCondition11Assignment_0() { return cCondition11Assignment_0; }
		
		//Variables
		public RuleCall getCondition11VariablesParserRuleCall_0_0() { return cCondition11VariablesParserRuleCall_0_0; }
		
		//'with'?
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'new'?
		public Keyword getNewKeyword_2() { return cNewKeyword_2; }
		
		//condition12=Variables?
		public Assignment getCondition12Assignment_3() { return cCondition12Assignment_3; }
		
		//Variables
		public RuleCall getCondition12VariablesParserRuleCall_3_0() { return cCondition12VariablesParserRuleCall_3_0; }
		
		//'and '?
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//condition13=Variables
		public Assignment getCondition13Assignment_5() { return cCondition13Assignment_5; }
		
		//Variables
		public RuleCall getCondition13VariablesParserRuleCall_5_0() { return cCondition13VariablesParserRuleCall_5_0; }
		
		//(',' condition13=Variables)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//condition13=Variables
		public Assignment getCondition13Assignment_6_1() { return cCondition13Assignment_6_1; }
		
		//Variables
		public RuleCall getCondition13VariablesParserRuleCall_6_1_0() { return cCondition13VariablesParserRuleCall_6_1_0; }
	}
	public class PredicatePostCondition2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model.myzdsl.MyZDsl.PredicatePostCondition2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondition21Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondition21VariablesParserRuleCall_0_0 = (RuleCall)cCondition21Assignment_0.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondition22Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondition22VariablesParserRuleCall_2_0 = (RuleCall)cCondition22Assignment_2.eContents().get(0);
		private final Keyword cBELONGTOKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondition23Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondition23VariablesParserRuleCall_4_0 = (RuleCall)cCondition23Assignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCondition23Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCondition23VariablesParserRuleCall_5_1_0 = (RuleCall)cCondition23Assignment_5_1.eContents().get(0);
		
		//PredicatePostCondition2:
		//    condition21=Variables? 'where'? condition22=Variables? 'BELONG TO'?  condition23=Variables(',' condition23=Variables)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//condition21=Variables? 'where'? condition22=Variables? 'BELONG TO'?  condition23=Variables(',' condition23=Variables)?
		public Group getGroup() { return cGroup; }
		
		//condition21=Variables?
		public Assignment getCondition21Assignment_0() { return cCondition21Assignment_0; }
		
		//Variables
		public RuleCall getCondition21VariablesParserRuleCall_0_0() { return cCondition21VariablesParserRuleCall_0_0; }
		
		//'where'?
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }
		
		//condition22=Variables?
		public Assignment getCondition22Assignment_2() { return cCondition22Assignment_2; }
		
		//Variables
		public RuleCall getCondition22VariablesParserRuleCall_2_0() { return cCondition22VariablesParserRuleCall_2_0; }
		
		//'BELONG TO'?
		public Keyword getBELONGTOKeyword_3() { return cBELONGTOKeyword_3; }
		
		//condition23=Variables
		public Assignment getCondition23Assignment_4() { return cCondition23Assignment_4; }
		
		//Variables
		public RuleCall getCondition23VariablesParserRuleCall_4_0() { return cCondition23VariablesParserRuleCall_4_0; }
		
		//(',' condition23=Variables)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//condition23=Variables
		public Assignment getCondition23Assignment_5_1() { return cCondition23Assignment_5_1; }
		
		//Variables
		public RuleCall getCondition23VariablesParserRuleCall_5_1_0() { return cCondition23VariablesParserRuleCall_5_1_0; }
	}
	
	
	private final MyZModelElements pMyZModel;
	private final SystemStateSpaceElements pSystemStateSpace;
	private final SystemStateSpacePredicateElements pSystemStateSpacePredicate;
	private final NNElements pNN;
	private final VBZElements pVBZ;
	private final DTElements pDT;
	private final NNSElements pNNS;
	private final VBPElements pVBP;
	private final JJElements pJJ;
	private final InitialStateElements pInitialState;
	private final SchemaElements pSchema;
	private final CCElements pCC;
	private final MDElements pMD;
	private final VBGElements pVBG;
	private final PredicateElements pPredicate;
	private final SchemaStateElements pSchemaState;
	private final VariablesElements pVariables;
	private final EStringElements pEString;
	private final BelongsStateElements pBelongsState;
	private final FunctionListElements pFunctionList;
	private final PredicatePostCondition1Elements pPredicatePostCondition1;
	private final PredicatePostCondition2Elements pPredicatePostCondition2;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyZDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMyZModel = new MyZModelElements();
		this.pSystemStateSpace = new SystemStateSpaceElements();
		this.pSystemStateSpacePredicate = new SystemStateSpacePredicateElements();
		this.pNN = new NNElements();
		this.pVBZ = new VBZElements();
		this.pDT = new DTElements();
		this.pNNS = new NNSElements();
		this.pVBP = new VBPElements();
		this.pJJ = new JJElements();
		this.pInitialState = new InitialStateElements();
		this.pSchema = new SchemaElements();
		this.pCC = new CCElements();
		this.pMD = new MDElements();
		this.pVBG = new VBGElements();
		this.pPredicate = new PredicateElements();
		this.pSchemaState = new SchemaStateElements();
		this.pVariables = new VariablesElements();
		this.pEString = new EStringElements();
		this.pBelongsState = new BelongsStateElements();
		this.pFunctionList = new FunctionListElements();
		this.pPredicatePostCondition1 = new PredicatePostCondition1Elements();
		this.pPredicatePostCondition2 = new PredicatePostCondition2Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("model.myzdsl.MyZDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MyZModel:
	//    systemstatespace+=SystemStateSpace
	//    initialstate+=InitialState
	//    (schemas+=Schema)*
	//     ;
	public MyZModelElements getMyZModelAccess() {
		return pMyZModel;
	}
	
	public ParserRule getMyZModelRule() {
		return getMyZModelAccess().getRule();
	}
	
	//SystemStateSpace:
	//    ((NN NN NN VBZ name=ID) | (name=ID VBZ NN NN NN))
	//    ((DT NNS VBP) | (NNS VBP) | (NNS) ) variables+=Variables(',' variables+=Variables)*
	//    predicate+=SystemStateSpacePredicate
	//    ;
	public SystemStateSpaceElements getSystemStateSpaceAccess() {
		return pSystemStateSpace;
	}
	
	public ParserRule getSystemStateSpaceRule() {
		return getSystemStateSpaceAccess().getRule();
	}
	
	//SystemStateSpacePredicate:
	//    DT JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables | JJ NNS VBP vas+=Variables(',' vas+=Variables)* function=FunctionList predicateVar=Variables;
	public SystemStateSpacePredicateElements getSystemStateSpacePredicateAccess() {
		return pSystemStateSpacePredicate;
	}
	
	public ParserRule getSystemStateSpacePredicateRule() {
		return getSystemStateSpacePredicateAccess().getRule();
	}
	
	//NN:
	//    'system' | 'state' |'space'| 'initial' | 'predicate' |'variable'|'variables'|'schema'|'operation'|'function'|'input'|'output'|'name';
	public NNElements getNNAccess() {
		return pNN;
	}
	
	public ParserRule getNNRule() {
		return getNNAccess().getRule();
	}
	
	//VBZ:
	//    'is' | 'are' ;
	public VBZElements getVBZAccess() {
		return pVBZ;
	}
	
	public ParserRule getVBZRule() {
		return getVBZAccess().getRule();
	}
	
	//DT:
	//    'The';
	public DTElements getDTAccess() {
		return pDT;
	}
	
	public ParserRule getDTRule() {
		return getDTAccess().getRule();
	}
	
	//NNS:
	//    'variables'| 'parameters'| 'features'|'variable'| 'parameter'| 'feature';
	public NNSElements getNNSAccess() {
		return pNNS;
	}
	
	public ParserRule getNNSRule() {
		return getNNSAccess().getRule();
	}
	
	//VBP:
	//    'include' | 'includes' | 'is' | 'are';
	public VBPElements getVBPAccess() {
		return pVBP;
	}
	
	public ParserRule getVBPRule() {
		return getVBPAccess().getRule();
	}
	
	//JJ:
	//    'predicate' | 'initial' | 'postcondition' | 'post condition';
	public JJElements getJJAccess() {
		return pJJ;
	}
	
	public ParserRule getJJRule() {
		return getJJAccess().getRule();
	}
	
	//InitialState:
	//    JJ NN VBZ name=ID
	//    ((DT JJ NNS VBP) | (JJ NNS VBP)) variables+=Variables(',' variables+=Variables)*
	//    ((DT JJ NNS VBP) | (JJ NNS VBP)) pred+=Variables;
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//Schema:
	//    (NN NN NN VBZ name=ID NN NN MD) state=SchemaState nameSchema=EString
	//    ((DT NN NNS VBP) | (NN NNS VBP)) varsInput+=Variables(',' varsInput+=Variables)*
	//    ((DT NN NNS VBP) | (NN NNS VBP)) varsOutput+=Variables(',' varsOutput+=Variables)*
	//    predicates+=Predicate;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//CC:
	//    'and'| 'or';
	public CCElements getCCAccess() {
		return pCC;
	}
	
	public ParserRule getCCRule() {
		return getCCAccess().getRule();
	}
	
	//MD:
	//    'will' | 'are';
	public MDElements getMDAccess() {
		return pMD;
	}
	
	public ParserRule getMDRule() {
		return getMDAccess().getRule();
	}
	
	//VBG:
	//    'changing' |'change';
	public VBGElements getVBGAccess() {
		return pVBG;
	}
	
	public ParserRule getVBGRule() {
		return getVBGAccess().getRule();
	}
	
	//Predicate:
	//    ((DT JJ NN NN VBZ) | (JJ NN NN VBZ))? vasInput+=Variables? belongs=BelongsState ? belongsVariable=Variables ? //(',' vasOutput+=Variables)*
	//    ((DT JJ NN NN VBZ) | (JJ NN NN VBZ))?    vasOutput+=PredicatePostCondition2 ? //expression=Variables?//(',' vasOutput+=Variables)*
	//    ((DT JJ NN VBG NN VBZ)| (NN VBZ) | (JJ NN VBG NN VBZ))? vasStateChange+=PredicatePostCondition1 ? ;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//SchemaState:
	//    'CHANGE' | 'NOT CHANGE';
	public SchemaStateElements getSchemaStateAccess() {
		return pSchemaState;
	}
	
	public ParserRule getSchemaStateRule() {
		return getSchemaStateAccess().getRule();
	}
	
	//Variables:
	//     name=ID;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//BelongsState:
	//    'BELONGS TO' | 'DOES NOT BELONG TO';
	public BelongsStateElements getBelongsStateAccess() {
		return pBelongsState;
	}
	
	public ParserRule getBelongsStateRule() {
		return getBelongsStateAccess().getRule();
	}
	
	//FunctionList:
	//    'dom' | 'range';
	public FunctionListElements getFunctionListAccess() {
		return pFunctionList;
	}
	
	public ParserRule getFunctionListRule() {
		return getFunctionListAccess().getRule();
	}
	
	//PredicatePostCondition1:
	//    condition11=Variables? 'with'? 'new'?  condition12=Variables? 'and '? condition13=Variables(',' condition13=Variables)? ;
	public PredicatePostCondition1Elements getPredicatePostCondition1Access() {
		return pPredicatePostCondition1;
	}
	
	public ParserRule getPredicatePostCondition1Rule() {
		return getPredicatePostCondition1Access().getRule();
	}
	
	//PredicatePostCondition2:
	//    condition21=Variables? 'where'? condition22=Variables? 'BELONG TO'?  condition23=Variables(',' condition23=Variables)? ;
	public PredicatePostCondition2Elements getPredicatePostCondition2Access() {
		return pPredicatePostCondition2;
	}
	
	public ParserRule getPredicatePostCondition2Rule() {
		return getPredicatePostCondition2Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
