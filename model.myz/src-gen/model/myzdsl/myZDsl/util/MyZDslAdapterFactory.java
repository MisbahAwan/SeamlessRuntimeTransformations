/**
 * generated by Xtext 2.25.0
 */
package model.myzdsl.myZDsl.util;

import model.myzdsl.myZDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see model.myzdsl.myZDsl.MyZDslPackage
 * @generated
 */
public class MyZDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyZDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyZDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyZDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyZDslSwitch<Adapter> modelSwitch =
    new MyZDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseMyZModel(MyZModel object)
      {
        return createMyZModelAdapter();
      }
      @Override
      public Adapter caseSystemStateSpace(SystemStateSpace object)
      {
        return createSystemStateSpaceAdapter();
      }
      @Override
      public Adapter caseSystemStateSpacePredicate(SystemStateSpacePredicate object)
      {
        return createSystemStateSpacePredicateAdapter();
      }
      @Override
      public Adapter caseInitialState(InitialState object)
      {
        return createInitialStateAdapter();
      }
      @Override
      public Adapter caseSchema(Schema object)
      {
        return createSchemaAdapter();
      }
      @Override
      public Adapter casePredicate(Predicate object)
      {
        return createPredicateAdapter();
      }
      @Override
      public Adapter caseVariables(Variables object)
      {
        return createVariablesAdapter();
      }
      @Override
      public Adapter casePredicatePostCondition1(PredicatePostCondition1 object)
      {
        return createPredicatePostCondition1Adapter();
      }
      @Override
      public Adapter casePredicatePostCondition2(PredicatePostCondition2 object)
      {
        return createPredicatePostCondition2Adapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.MyZModel <em>My ZModel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.MyZModel
   * @generated
   */
  public Adapter createMyZModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.SystemStateSpace <em>System State Space</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.SystemStateSpace
   * @generated
   */
  public Adapter createSystemStateSpaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.SystemStateSpacePredicate <em>System State Space Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.SystemStateSpacePredicate
   * @generated
   */
  public Adapter createSystemStateSpacePredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.InitialState <em>Initial State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.InitialState
   * @generated
   */
  public Adapter createInitialStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.Schema <em>Schema</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.Schema
   * @generated
   */
  public Adapter createSchemaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.Predicate <em>Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.Predicate
   * @generated
   */
  public Adapter createPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.Variables <em>Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.Variables
   * @generated
   */
  public Adapter createVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.PredicatePostCondition1 <em>Predicate Post Condition1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.PredicatePostCondition1
   * @generated
   */
  public Adapter createPredicatePostCondition1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link model.myzdsl.myZDsl.PredicatePostCondition2 <em>Predicate Post Condition2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see model.myzdsl.myZDsl.PredicatePostCondition2
   * @generated
   */
  public Adapter createPredicatePostCondition2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyZDslAdapterFactory
