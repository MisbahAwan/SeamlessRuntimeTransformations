/*
 * generated by Xtext 2.25.0
 */
package model.myzdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import model.myzdsl.myZDsl.InitialState;
import model.myzdsl.myZDsl.MyZDslPackage;
import model.myzdsl.myZDsl.MyZModel;
import model.myzdsl.myZDsl.Predicate;
import model.myzdsl.myZDsl.PredicatePostCondition1;
import model.myzdsl.myZDsl.PredicatePostCondition2;
import model.myzdsl.myZDsl.Schema;
import model.myzdsl.myZDsl.SystemStateSpace;
import model.myzdsl.myZDsl.SystemStateSpacePredicate;
import model.myzdsl.myZDsl.Variables;
import model.myzdsl.services.MyZDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyZDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyZDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyZDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyZDslPackage.INITIAL_STATE:
				sequence_InitialState(context, (InitialState) semanticObject); 
				return; 
			case MyZDslPackage.MY_ZMODEL:
				sequence_MyZModel(context, (MyZModel) semanticObject); 
				return; 
			case MyZDslPackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			case MyZDslPackage.PREDICATE_POST_CONDITION1:
				sequence_PredicatePostCondition1(context, (PredicatePostCondition1) semanticObject); 
				return; 
			case MyZDslPackage.PREDICATE_POST_CONDITION2:
				sequence_PredicatePostCondition2(context, (PredicatePostCondition2) semanticObject); 
				return; 
			case MyZDslPackage.SCHEMA:
				sequence_Schema(context, (Schema) semanticObject); 
				return; 
			case MyZDslPackage.SYSTEM_STATE_SPACE:
				sequence_SystemStateSpace(context, (SystemStateSpace) semanticObject); 
				return; 
			case MyZDslPackage.SYSTEM_STATE_SPACE_PREDICATE:
				sequence_SystemStateSpacePredicate(context, (SystemStateSpacePredicate) semanticObject); 
				return; 
			case MyZDslPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InitialState returns InitialState
	 *
	 * Constraint:
	 *     (name=ID variables+=Variables variables+=Variables* pred+=Variables)
	 */
	protected void sequence_InitialState(ISerializationContext context, InitialState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MyZModel returns MyZModel
	 *
	 * Constraint:
	 *     (systemstatespace+=SystemStateSpace initialstate+=InitialState schemas+=Schema*)
	 */
	protected void sequence_MyZModel(ISerializationContext context, MyZModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PredicatePostCondition1 returns PredicatePostCondition1
	 *
	 * Constraint:
	 *     (condition11=Variables? condition12=Variables? condition13=Variables condition13=Variables?)
	 */
	protected void sequence_PredicatePostCondition1(ISerializationContext context, PredicatePostCondition1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PredicatePostCondition2 returns PredicatePostCondition2
	 *
	 * Constraint:
	 *     (condition21=Variables? condition22=Variables? condition23=Variables condition23=Variables?)
	 */
	protected void sequence_PredicatePostCondition2(ISerializationContext context, PredicatePostCondition2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     (
	 *         vasInput+=Variables? 
	 *         belongs=BelongsState? 
	 *         belongsVariable=Variables? 
	 *         vasOutput+=PredicatePostCondition2? 
	 *         vasStateChange+=PredicatePostCondition1?
	 *     )
	 */
	protected void sequence_Predicate(ISerializationContext context, Predicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Schema returns Schema
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         state=SchemaState 
	 *         nameSchema=EString 
	 *         varsInput+=Variables 
	 *         varsInput+=Variables* 
	 *         varsOutput+=Variables 
	 *         varsOutput+=Variables* 
	 *         predicates+=Predicate
	 *     )
	 */
	protected void sequence_Schema(ISerializationContext context, Schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemStateSpacePredicate returns SystemStateSpacePredicate
	 *
	 * Constraint:
	 *     (
	 *         (vas+=Variables vas+=Variables* function=FunctionList predicateVar=Variables) | 
	 *         (vas+=Variables vas+=Variables* function=FunctionList predicateVar=Variables)
	 *     )
	 */
	protected void sequence_SystemStateSpacePredicate(ISerializationContext context, SystemStateSpacePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemStateSpace returns SystemStateSpace
	 *
	 * Constraint:
	 *     ((name=ID | name=ID) variables+=Variables variables+=Variables* predicate+=SystemStateSpacePredicate)
	 */
	protected void sequence_SystemStateSpace(ISerializationContext context, SystemStateSpace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyZDslPackage.Literals.VARIABLES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyZDslPackage.Literals.VARIABLES__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariablesAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
